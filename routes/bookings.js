const express = require('express');
const router = express.Router();
const Booking = require('../models/Booking');
const { verifyToken, verifyAdmin } = require("../middleware/auth");
const mongoose = require("mongoose");
const dayjs = require('dayjs');

router.post('/bookings', verifyToken, async (req, res) => {
  try {
    console.log("üîç req.user:", req.user);

    if (!req.user || !req.user.userId) {
      return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà" });
    }

    const { room, startTime, endTime } = req.body;
    if (!room || !startTime || !endTime) {
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const start = new Date(startTime);
    const end = new Date(endTime);
    if (isNaN(start.getTime()) || isNaN(end.getTime())) {
      return res.status(400).json({ message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    if (start >= end) {
      return res.status(400).json({ message: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î' });
    }

    const overlappingBooking = await Booking.findOne({
      room,
      $or: [
        { 
          startTime: { $lt: end }, 
          endTime: { $gt: start } 
        }
      ]
    });

    if (overlappingBooking) {
      return res.status(400).json({ 
        message: `‡∏´‡πâ‡∏≠‡∏á ${room} ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${dayjs(overlappingBooking.startTime).format('HH:mm')} - ${dayjs(overlappingBooking.endTime).format('HH:mm')}` 
      });
    }

    console.log("Creating new booking with user ID:", req.user.userId);

    const booking = new Booking({
      room,
      startTime: start,
      endTime: end,
      user: new mongoose.Types.ObjectId(req.user.userId),
    });

    await booking.save();
    return res.status(201).json({ message: '‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', booking });
  } catch (error) {
    console.error('Error in POST /bookings:', error.message);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
});

router.get('/bookings', async (req, res) => {
  try {
    const bookings = await Booking.find()
      .populate('user', 'fullName studentId')
      .sort({ startTime: 1 });
    console.log(bookings);
    res.json(bookings);
  } catch (error) {
    console.error('Error in GET /bookings:', error.message);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
});

router.delete("/bookings/:id", verifyToken, async (req, res) => {
  try {
    const booking = await Booking.findById(req.params.id);
    console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ID:", req.params.id);
    console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠:", req.user);

    if (!booking) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ" });
    }

    if (booking.user.toString() !== req.user.userId && req.user.role !== "admin") {
      return res.status(403).json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ" });
    }

    await Booking.findByIdAndDelete(req.params.id);
    res.json({ message: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("Error in DELETE /bookings/:id:", error.message);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});

router.get('/bookings/:id', async (req, res) => {
  try {
    const booking = await Booking.findById(req.params.id);
    if (!booking) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ' });
    }
    res.json(booking);
  } catch (error) {
    console.error('Error in GET /bookings/:id:', error.message);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
});

module.exports = router;